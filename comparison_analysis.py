#!/usr/bin/env python3
"""
An√°lise Comparativa de Estrat√©gias de Agrega√ß√£o em Aprendizado Federado.
Gera visualiza√ß√µes profissionais em PDF a partir de ficheiros de m√©tricas consolidadas.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
import re

warnings.filterwarnings('ignore')

# Configura√ß√£o de estilo para apresenta√ß√£o (baseado no seu trajectory_analysis.py)
plt.rcParams['font.size'] = 14
plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.serif'] = ['Times New Roman']
plt.rcParams['axes.labelsize'] = 16
plt.rcParams['axes.titlesize'] = 18
plt.rcParams['xtick.labelsize'] = 13
plt.rcParams['ytick.labelsize'] = 13
plt.rcParams['legend.fontsize'] = 13
plt.rcParams['figure.dpi'] = 300
plt.rcParams['savefig.dpi'] = 300
plt.rcParams['savefig.bbox'] = 'tight'

# Paleta de cores para estrat√©gias e clientes
STRATEGY_COLORS = {
    'fedavg': '#1f77b4',
    'fedadam': '#ff7f0e',
    'fedyogi': '#2ca02c',
    'fedadagrad': '#d62728',
}
CLIENT_COLORS = {
    1: '#2E7D32', # Verde escuro
    2: '#1565C0', # Azul
    3: '#C62828', # Vermelho escuro
    'global': '#000000' # Preto
}
INMETRO_BLUE = '#3D538D'

class StrategyAnalyzer:
    def __init__(self, results_dir='results_comparison_120', output_dir='comparison_graphics_120'):
        self.results_dir = Path(results_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.strategy_data = {}

    def load_all_strategy_data(self):
        """Carrega os ficheiros de m√©tricas de todas as estrat√©gias."""
        print("Carregando resultados das estrat√©gias...")
        
        # Regex para extrair o nome da estrat√©gia do nome do ficheiro
        file_pattern = re.compile(r"metrics_(.+)\.csv")
        
        for csv_file in self.results_dir.glob("metrics_*.csv"):
            match = file_pattern.match(csv_file.name)
            if match:
                strategy_name = match.group(1)
                df = pd.read_csv(csv_file)
                self.strategy_data[strategy_name] = df
                print(f"  ‚úì Estrat√©gia '{strategy_name}' carregada com {len(df)} registos.")
    
    def plot_global_convergence(self):
        """Compara a converg√™ncia da perda de valida√ß√£o global entre estrat√©gias."""
        fig, ax = plt.subplots(figsize=(12, 7))
        
        for name, data in self.strategy_data.items():
            ax.plot(data['rounds'], data['global_eval_loss'], 
                    marker='o', linestyle='-',
                    label=name.upper(), color=STRATEGY_COLORS.get(name, 'gray'),
                    alpha=0.8, markersize=5)

        ax.set_xlabel('Rodada de Treinamento', fontsize=16)
        ax.set_ylabel('Perda de Valida√ß√£o Global (MSE)', fontsize=16)
        ax.set_title('Comparativo de Converg√™ncia Global', 
                     fontsize=20, fontweight='bold', color=INMETRO_BLUE)
        ax.legend(fontsize=14)
        ax.grid(True, alpha=0.3)
        ax.set_ylim(bottom=0)
        
        output_file = self.output_dir / 'global_convergence.pdf'
        plt.savefig(output_file, format='pdf')
        plt.close()
        print(f"  ‚úì Salvo: {output_file}")

    def plot_training_vs_validation(self):
        """Plota a perda de treino vs. valida√ß√£o para cada estrat√©gia."""
        for name, data in self.strategy_data.items():
            fig, ax = plt.subplots(figsize=(12, 7))

            ax.plot(data['rounds'], data['global_train_loss'], 
                    marker='s', linestyle='--', label='Treinamento Global', 
                    color=CLIENT_COLORS.get(2))

            ax.plot(data['rounds'], data['global_eval_loss'], 
                    marker='o', linestyle='-', label='Valida√ß√£o Global', 
                    color=CLIENT_COLORS.get(3))

            ax.set_xlabel('Rodada de Treinamento', fontsize=16)
            ax.set_ylabel('Perda M√©dia (MSE)', fontsize=16)
            ax.set_title(f'Treino vs. Valida√ß√£o - Estrat√©gia {name.upper()}', 
                         fontsize=18, fontweight='bold', color=INMETRO_BLUE)
            ax.legend(fontsize=14)
            ax.grid(True, alpha=0.3)
            ax.set_ylim(bottom=0)

            output_file = self.output_dir / f'train_vs_eval_{name}.pdf'
            plt.savefig(output_file, format='pdf')
            plt.close()
            print(f"  ‚úì Salvo: {output_file}")

    def plot_client_performance(self):
        """Gera um gr√°fico de desempenho por cliente para cada estrat√©gia."""
        for name, data in self.strategy_data.items():
            fig, ax = plt.subplots(figsize=(12, 7))
            
            # Plota desempenho de cada cliente
            for client_id in [1, 2, 3]:
                col_name = f'client_{client_id}_eval_loss'
                if col_name in data.columns:
                    ax.plot(data['rounds'], data[col_name], marker='.', linestyle='--', 
                            label=f'Cliente {client_id}', color=CLIENT_COLORS.get(client_id))
            
            # Plota a m√©dia global para refer√™ncia
            ax.plot(data['rounds'], data['global_eval_loss'], marker='o', linestyle='-',
                    label='M√©dia Global', color=CLIENT_COLORS.get('global'), linewidth=2.5)

            ax.set_title(f'Desempenho por Cliente - Estrat√©gia {name.upper()}', fontsize=18)
            ax.set_xlabel('Rodada', fontsize=14)
            ax.set_ylabel('Perda de Valida√ß√£o (MSE)', fontsize=14)
            ax.legend()
            ax.grid(True, alpha=0.3)
            ax.set_ylim(bottom=0)
            
            output_file = self.output_dir / f'client_performance_{name}.pdf'
            plt.savefig(output_file, format='pdf')
            plt.close()
            print(f"  ‚úì Salvo: {output_file}")

    def generate_all_plots(self):
        """Executa todas as fun√ß√µes de plotagem."""
        print("\n=== Gerando An√°lise Comparativa de Estrat√©gias ===\n")
        self.load_all_strategy_data()

        if not self.strategy_data:
            print("‚ùå Nenhum dado de estrat√©gia foi carregado. Verifique os ficheiros CSV na pasta de resultados.")
            return

        print("\nGerando visualiza√ß√µes na pasta 'comparison_graphics/'...")
        self.plot_global_convergence()
        self.plot_training_vs_validation()
        self.plot_client_performance()
        
        print(f"\n‚úÖ Todas as visualiza√ß√µes foram geradas com sucesso!")
        print(f"üìÅ Ficheiros salvos em: {self.output_dir}/")

def main():
    analyzer = StrategyAnalyzer(results_dir='results_comparison_120', output_dir='comparison_graphics_120')
    analyzer.generate_all_plots()

if __name__ == "__main__":
    main()